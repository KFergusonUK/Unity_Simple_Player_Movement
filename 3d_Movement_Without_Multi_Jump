
//The below is for 3D Movement, it requires a "Player" object, with an assigned RigidBody, an empty Container 1 Y under the player, named "Ground Check" attached as a child item to the player, and a Script assigned to the player (I named mine 'PlayerMovement').
//This script is assigned to the PlayerMovement script file.
//The ground of the level has been assigned the "Layer" name "Ground". 
//In the player movement script, in the inspector in Unity, the "Gound" layer must be assigned to the ground variable and the Ground Check object (/transform) assigned to the Ground Check variable (Drag and drop).

using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class PlsyerMovement : MonoBehaviour
{

    Rigidbody rb;
    [SerializeField] float playerSpeed = 5f; //Sets the float value for playerSpeed, SerializeField add this to the PlayerMovement componant in Unity.
    [SerializeField] float jumpForce = 5f; //Sets the float value for jumpForce, SerializeField add this to the PlayerMovement componant in Unity.

    [SerializeField] Transform groundCheck;  //Variable to hold the groundCheck position, the Ground Check item in the editor must be assigned to this field (drag and drop)
    [SerializeField] LayerMask ground; //Must also be assigned a value by drag and drop/selecting layer mask of Ground in editor.


    // Start is called before the first frame update
    void Start()
    {
        // Get the RigidBody from the player:
        rb = GetComponent<Rigidbody>();
    }

    // Update is called once per frame
    void Update()
    {
        // Use the Unity preset Movement keys in 'Edit > Project Settings > Input Manager' and assigns the input (positve or negative value) to a variable.
        float horizontalInput = Input.GetAxis("Horizontal");
        float verticalInput = Input.GetAxis("Vertical");

        //Sets the velocity of the player to the input value of Horizontal/Vertiacal * playerSpeed:
        rb.velocity = new Vector3(horizontalInput * playerSpeed, rb.velocity.y, verticalInput * playerSpeed);

        //Jump function, if jump is pressed AND IsGrounded is true, then can jump...:
        if(Input.GetButtonDown("Jump") && IsGrounded())
        {
            //Set the players Y axis (height) to increase by the jumpForce:
            rb.velocity = new Vector3(rb.velocity.x, jumpForce, rb.velocity.z);
        }
    
    }

    //Check to see if the Ground Check (At base of player) is at same position of the fllor we changed ot have layer name "ground" and return true or false:
    bool IsGrounded()
    {
        return Physics.CheckSphere(groundCheck.position, .1f, ground);
    }

}
